// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package repo

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (name, price)
VALUES ($1, $2)
RETURNING id, name, price, created_at
`

type CreateProductParams struct {
	Name  string `json:"name"`
	Price int64  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :execrows
DELETE FROM product
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProduct, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllProduct = `-- name: GetAllProduct :many
SELECT id, name, price, created_at
FROM product
ORDER BY id DESC
`

func (q *Queries) GetAllProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, created_at
FROM product
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :execrows
UPDATE product
SET name = $1,
	price = $2
WHERE id = $3
`

type UpdateProductParams struct {
	Name  string `json:"name"`
	Price int64  `json:"price"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateProduct, arg.Name, arg.Price, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
