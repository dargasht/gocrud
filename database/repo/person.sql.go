// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: person.sql

package repo

import (
	"context"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO person (name, email)
VALUES ($1, $2)
RETURNING id, name, email, created_at
`

type CreatePersonParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson, arg.Name, arg.Email)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deletePerson = `-- name: DeletePerson :execrows
DELETE FROM person
WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deletePerson, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllPerson = `-- name: GetAllPerson :many
SELECT id, name, email, created_at
FROM person
ORDER BY id DESC
`

func (q *Queries) GetAllPerson(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, getAllPerson)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, name, email, created_at
FROM person
WHERE id = $1
`

func (q *Queries) GetPersonByID(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRow(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updatePerson = `-- name: UpdatePerson :execrows
UPDATE person
SET name = $1,
	email = $2
WHERE id = $3
`

type UpdatePersonParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePerson, arg.Name, arg.Email, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
